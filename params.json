{"name":"Knighkit","tagline":"组件化","body":"## 欢迎使用 knighkit.\r\nknighkit 是自动化，模块开发，并支持自动打包，支持远程调试的前端开发框架。\r\n目的是减少前端开发过程中的重复工作，使你更关注程序本身。\r\n\r\n## 功能\r\n#### 自动化生成项目结构\r\n一条命令，完成项目的结构\r\n\r\n#### 集成常用的 jquery underscore 库等\r\njquery 主要用于功能的开发，underscore 用于数据的处理等\r\n\r\n#### 集成开发阶段使用的模块化开发库 seajs\r\nseajs 用来完成开发阶段的模块加载和调试\r\n\r\n#### 新型的模版组成方式，模版即模块。\r\n每个模块都是一个文件夹，每个模块由以下文件构成:\r\n* m.html/hogan/vm/jade 模版文件，支持4种，自动识别编译\r\n* m.js 本模块的初始化\r\n* m.css 样式\r\n* m.json 本模块的测试数据\r\n* data.js 模版的数据处理逻辑部分\r\n\r\n#### 集成 jstm 模版管理工具\r\n可以使用任意支持预编译的模版框架，强有力的模版构建管理能力\r\n* 支持四种模版： jade，ktemplate，mustache（hogan.js），velecity\r\n* 支持模版数据处理模块\r\n* 支持将其他模版作为插件添加\r\n\r\n#### 单独模版的测试页面\r\n自动生成单独模版的测试页面，自动打包数据，方便测试每个小模块\r\n\r\n#### 可定制 html 模版的生成模块\r\n可方便的自行添加模版中需要的js工具库等\r\n\r\n#### 自动重新编译\r\n自动化监测模版文件变化，自动重新编译已修改的模版文件\r\n\r\n#### 内建预览服务器\r\n不需要启动自己的 HTTP 服务器，内置的服务器用一条命令就可以启动\r\n\r\n#### 内建 weinre 远程调试服务器\r\n一条命令就可以启动 weinre，简单方便的调试移动端\r\n\r\n#### 支持 css 的合并压缩\r\n\r\n#### 内置打包工具\r\n自动打包，打包后不依赖 seajs\r\n\r\n## How to start?\r\n```\r\n$ npm install -g knighkit\r\n```\r\n安装成功后，可以输入\r\n```\r\n$ kkit -?\r\n$ kkit -h\r\n$ kkit --help\r\n```\r\n查看帮助。\r\n\r\n## 构建你第一个 knighkit 项目\r\n#### 初始化项目\r\n```\r\nkkit -g\r\nkkit --generate\r\n```\r\n此命令可在执行命令的目录下，生成一个 knighkit 开发项目。\r\n\r\n#### 生成模版\r\n```\r\nkkit -i\r\nkkit --init\r\n```\r\n根据以上生成项目的 src/template/good.json 生成模版。\r\n\r\n生成的模版在src/template中。\r\n\r\n#### 添加一个模版\r\n\r\n#### 编译模版\r\n```\r\nkkit -b\r\nkkit --build\r\n```\r\nsrc/template中的模版会被编译输出到 output文件夹下。\r\n\r\n#### 合并压缩 \r\n```\r\nkkit -p\r\nkkit --package\r\n```\r\n根据配置文件中的配置打包，见配置文件\r\n```\r\n/**                                                  \r\n * 打包模块, 可设置多个                                       \r\n * path 是要打包文件的入口模块路径                                \r\n * name 是输出文件名称                                      \r\n * -------- begin -----------*/                      \r\n\"packModules\": [                                     \r\n    {\"path\": \"src/scripts/business\", \"name\": \"business\"}\r\n]                                                  \r\n```\r\n以上配置会以 src/script/business 为主入口，打包程序后，以 business 为名称，输出到 dist 下两个文件：\r\n```\r\ndist/business.js\r\ndist/business-min.js\r\n```\r\n\r\n#### 启动静态服务器\r\n```\r\nkkit -s http\r\nkkit --start\r\n```\r\n该命令可以启动一个http静态服务器，服务器的根目录对应项目的根目录。端口号对应配置文件中的端口号：configs.js中的 http.port，默认是 9527。\r\n\r\n##### 模板编译中间件\r\n此静态服务器集成了一个模板编译的中间件，作用是，当访问模板文件时，自动编译，返回给js加载器。如：\r\n```\r\nrequire('src/template/list');\r\n```\r\n以上代码在启动了静态服务器后，可以加载 template 模板文件夹下的 list 模板。\r\n\r\n如果不启动静态服务器，会默认查找 src/template/list.js，在 knighkit 中，template/list 会是文件夹，其中包含 m.js m.html m.css 等。因此，会返回 404。\r\n\r\n以上请求，经中间件处理，会编译相应的模板，并将模板编译后的 js 代码返回给 js 加载器。等同于直接加载使用 ``` kkit -b``` 以后的 js 文件：\r\n```\r\nrequire('output/list/list');\r\n```\r\n##### 使用第一种方式的好处\r\n如下：\r\n* 代码可读性好，让开发者一眼就能看出来引用的模板在哪里。\r\n* 并将模板编译的细节对开发者做了隐藏，让开发者感觉不到模板的编译中间过程的存在。\r\n* 提升开发效率，模板修改后，不再需要使用编译命令编译，直接刷新页面即可查看结果。\r\n\r\n#### 项目打包\r\n```\r\nkkit -e\r\nkkit --export\r\n```\r\n参数为项目入口的页面文件（如index.html），将文件名（index）作为项目名称，将主页和主页依赖的静态资源都拷贝到该目录下。\r\n\r\n具体的步骤为，在项目根目录先会创建__publish__/{项目名}文件夹，经过分析页面，合并压缩所需css，拷贝到 __publish__/{项目名}/styles 文件夹下；合并压缩页面所需的js文件，放到 __publish__/{项目名}/script 下，然后，根据配置文件中的staticResource，将相应的资源拷贝到 __publish__/{项目名}下相应的位置下。\r\n```\r\n\"staticResource\": [                                     \r\n    {\"source\": \"src/styles/icons\", \"target\": \"styles\"}\r\n]                                                  \r\n```\r\n通过以上配置，会将icons文件夹，拷贝到 __publish__/{项目名}/styles 下。\r\n\r\n如果不传递任何参数，会默认在 __publish__ 下生成一个 \\_\\_allpacked 的文件夹，程序会遍历根文件夹下的.html的文件，依次作为入口，打包到 \\_\\_allpacked 文件夹下。这种方式比较适合含有公共模块较多的页面，在上传静态资源时，可以不必手动处理公共的静态资源。\r\n\r\n## Authors and Contributors\r\nKnightWu (@wulijian)\r\n\r\n## Support or Contact\r\nwulijian722@gmail.com\r\n","google":"UA-39126046-1","note":"Don't delete this file! It's used internally to help with page regeneration."}