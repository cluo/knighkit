#! /usr/bin/env node

var path = require('path');
var fs = require('fs');
var connect = require('connect');
var http = require('http');
var shell = require('shelljs');
var tp = require('jstm');
require("consoleplusplus");

var cmd = process.cwd();
var builder = require(path.resolve(__dirname, '../lib/builder'));
var rootpath = '';

var optimist = require('optimist').
    options('h', {
        alias: 'help'
    }).
    options('?', {
        alias: 'help',
        describe: 'Show all the options!'
    }).
    options('b', {
        alias: 'build',
        describe: 'build all template to output dir.'
    }).
    options('r', {
        alias: 'root',
        describe: 'set project root directory.'
    }).
    options('s', {
        alias: 'startServer',
        describe: 'start server of [http].'
    }).
    options('d', {
        alias: 'serverDebug',
        describe: 'start server of 9528.'
    }).
    options('a', {
        alias: 'autoBuild',
        describe: 'Auto build module when template file changed.'
    }).
    options('u', {
        alias: 'update',
        describe: 'update template runtime helper".'
    });

/**
 * 是否函数
 * @param obj
 * @return {boolean}
 */
var isFunction = function (obj) {
    return Object.prototype.toString.call(obj) === '[object Function]';
};
/**
 * 分发命令的类
 * @param optimist
 * @constructor
 */
var Dispatcher = function (optimist) {
    this.optimist = optimist;
};

Dispatcher.prototype = {
    constructor: Dispatcher,
    run: function () {
        var ops = this.optimist.argv;
        for (var type in ops) {
            if (ops.hasOwnProperty(type) && isFunction(Dispatcher.handlers[type])) {
                Dispatcher.handlers[type].bind(this)(ops[type]);
            }
        }
    }
};

/**
 * 命令对应的处理函数
 * @type {{help: Function, generate: Function}}
 */
Dispatcher.handlers = {
    /**
     * 帮助文件
     * @param data
     */
    'help': function (data) {
        if (data) {
            console.log(this.optimist.help());
        }
    },
    'root': function (_rootPath) {
        rootpath = path.resolve(cmd, './' + _rootPath);
        builder.root(rootpath);
    },
    'build': function (templatePath) {
        builder.build(path.resolve(cmd, './' + templatePath));
    },
    'update': function () {
        var projectTemplatePath = path.resolve(__dirname, '../lib/tpHelper');
        tp.updateHelper(projectTemplatePath);
        console.info('UpdatePlugin success.');
    },
    'autoBuild': function () {
        builder.autoBuild();
    },
    'serverDebug': function (data) {
        var httpPort = 9528;
        var start = {
            'http': function () {
                //run local web server
                connect()
                    .use(function (req, res, next) {
                        if (req.url.indexOf(path.basename(rootpath)) === 1 && /index\.js$/.test(req.url)) {
                            var modsource = (process.cwd() + '/' + req.url).replace('/index.js', '');
                            if (path.extname(modsource) === '') {
                                res.setHeader('Content-Type', 'application/javascript');
                                builder.builds(modsource).then(function (code) {
                                    res.end(code);
                                });
                            } else {
                                return next();
                            }
                        } else {
                            return next();
                        }
                    })
                    .use(connect.static(process.cwd()))
                    .listen(httpPort);

                var io = require('socket.io').listen(9529);

                io.sockets.on('connection', function (socket) {
                    require('watch').createMonitor(rootpath, function (monitor) {
                        monitor.on("created", function (f, stat) {
                            // Handle file changes
                        });
                        monitor.on("changed", function (file, curr, prev) {
                            var fileName = path.resolve(__dirname, file);
                            socket.emit('updateTemplate', {fn: path.basename(rootpath) + '/' + path.relative(rootpath, fileName)});
                        });
                        monitor.on("removed", function (f, stat) {
                            // Handle removed files
                        });
                    });
                });
                console.info('start http server at #yellow{http://localhost:' + httpPort + '}');
                console.info('start socket server at #yellow{http://localhost:' + 9529 + '}');
            },
            'all': function () {
                this['http']();
            }
        };
        if (start[data] !== undefined) {
            start[data]();
        } else {
            console.error('Don\'t support server: ' + data);
        }
    },
    'startServer': function (data) {
        var httpPort = 9527;
        var start = {
            'http': function () {
                //run local web server
                var app = connect()
                    .use(connect.static(cmd));
                http.createServer(app).listen(httpPort);
                console.info('start http server at #yellow{http://localhost:' + httpPort + '}');
            },
            'all': function () {
                this['http']();
            }
        };
        if (start[data] !== undefined) {
            start[data]();
        } else {
            console.error('Don\'t support server: ' + data);
        }
    }
};

/**
 * 执行分发命令
 */
new Dispatcher(optimist).run();
