#! /usr/bin/env node

var path = require('path');
var fs = require('fs');
var connect = require('connect');
var http = require('http');
var shell = require('shelljs');
var tp = require('jstm');
require("consoleplusplus");

var cmd = process.cwd();

//var checkConfigFile = function () {
//    if (!fs.existsSync(path.resolve(cmd, './kConfig/configs.js'))) {
//        throw 'Could not find the [kConfig/configs.js] file, please check.';
//    }
//};

//var setcwdAsTheRootPath = function () {
//    var runtimePath = path.resolve(__dirname, '../lib/runtime.json');
//    var runtime = require(runtimePath);
//    runtime.rootPath = cmd;
//    fs.writeFileSync(runtimePath, JSON.stringify(runtime));
//};

//setcwdAsTheRootPath();

var optimist = require('optimist').
    options('h', {
        alias: 'help'
    }).
    options('?', {
        alias: 'help',
        describe: 'Show all the options!'
    }).
    options('b', {
        alias: 'build',
        describe: 'build all template to output dir.'
    }).
    options('s', {
        alias: 'startServer',
        describe: 'start server of [http].'
    }).
    options('u', {
        alias: 'update',
        describe: 'update template runtime helper".'
    });

/**
 * 是否函数
 * @param obj
 * @return {boolean}
 */
var isFunction = function (obj) {
    return Object.prototype.toString.call(obj) === '[object Function]';
};
/**
 * 分发命令的类
 * @param optimist
 * @constructor
 */
var Dispatcher = function (optimist) {
    this.optimist = optimist;
};

Dispatcher.prototype = {
    constructor: Dispatcher,
    run: function () {
        var ops = this.optimist.argv;
        for (var type in ops) {
            if (ops.hasOwnProperty(type) && isFunction(Dispatcher.handlers[type])) {
                Dispatcher.handlers[type].bind(this)(ops[type]);
            }
        }
    }
};

/**
 * 命令对应的处理函数
 * @type {{help: Function, generate: Function}}
 */
Dispatcher.handlers = {
    /**
     * 帮助文件
     * @param data
     */
    'help': function (data) {
        if (data) {
            console.log(this.optimist.help());
        }
    },
    'build': function (templatePath) {
        var path = require('path');
        var builder = require(path.resolve(__dirname, '../lib/builder')).root(path.resolve(cmd, './' + templatePath));
        builder.buildAll();
    },
    'update': function () {
        var projectTemplatePath = path.resolve(__dirname, '../lib/tpHelper');
        tp.updateHelper(projectTemplatePath);
        console.info('UpdatePlugin success.');
    },
    'startServer': function (data) {
        var httpPort = 9527;
        var start = {
            'http': function () {
                //run local web server
                var app =connect()
                    .use(connect.static(cmd));
                http.createServer(app).listen(httpPort);
                console.info('start http server at #yellow{http://localhost:' + httpPort + '}');
            },
            'all': function () {
                this['http']();
            }
        };
        if (start[data] !== undefined) {
            start[data]();
        } else {
            console.error('Don\'t support server: ' + data);
        }
    }
};

/**
 * 执行分发命令
 */
new Dispatcher(optimist).run();


